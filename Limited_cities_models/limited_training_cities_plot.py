# -*- coding: utf-8 -*-
"""PART2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dLUkmrGxhE5ArrkNa82uF3-Tn8GckJ81
"""

import os
import pandas as pd

folder_path = "/content/drive/MyDrive/thesis/PART2/ALLRESULTS"

def read_csv_files(folder_path):
    all_data = {}
    for root, dirs, files in os.walk(folder_path):
        for file in files:
            if file.endswith(".csv"):
                file_path = os.path.join(root, file)
                df = pd.read_csv(file_path)
                file_name = os.path.splitext(file)[0]  # Extracting filename without extension
                all_data[file_name] = df
    return all_data

all_results = read_csv_files(folder_path)

# Now you can access each DataFrame using its file name
for file_name, df in all_results.items():
    print(f"DataFrame from file '{file_name}':")
    print(df)

all_results.items()

import os
import pandas as pd

folder_path = "/content/drive/MyDrive/thesis/PART2/ALLRESULTS"

def read_csv_files(folder_path):
    all_data = {}
    for root, dirs, files in os.walk(folder_path):
        for file in files:
            if file.endswith(".csv"):
                file_path = os.path.join(root, file)
                df = pd.read_csv(file_path)
                file_name = os.path.splitext(file)[0]  # Extracting filename without extension
                all_data[file_name] = df
    return all_data

def calculate_mean_std(all_results):
    results_summary = {}
    for file_name, df in all_results.items():
        mean_rmse = df['RMSE'].mean()
        std_rmse = df['RMSE'].std()
        mean_bias = df['Bias'].mean()
        std_bias = df['Bias'].std()
        results_summary[file_name] = {
            'Mean_RMSE': mean_rmse,
            'Std_RMSE': std_rmse,
            'Mean_Bias': mean_bias,
            'Std_Bias': std_bias
        }
    return results_summary

# Read all CSV files into a dictionary
all_results = read_csv_files(folder_path)

# Calculate mean and standard deviation
results_summary = calculate_mean_std(all_results)

# Create a dataframe from the summary
summary_df = pd.DataFrame.from_dict(results_summary, orient='index')

print(summary_df)

# Define cluster order
cluster_order = ['GENERAL-60', 'GENERAL-15', 'GENERAL-6', 'CLUSTER-60', 'CLUSTER-15', 'CLUSTER-6']

# Create dataframes for each cluster
cluster_dfs = {}
for cluster in cluster_order:
    cluster_dfs[cluster] = pd.DataFrame(index=[f'CL{i}_{cluster}' for i in range(1, 4)], data=summary_df)

import matplotlib.pyplot as plt

# Define the order of clusters
cluster_order = ['GENERAL-60', 'GENERAL-15', 'GENERAL-6', 'CLUSTER-60', 'CLUSTER-15', 'CLUSTER-6']

# Sort the DataFrame based on the cluster order
cluster1_df = summary_df.filter(like='CL1', axis=0)
cluster1_df = cluster1_df.reindex(index=[f'CL1_{cluster}' for cluster in cluster_order])

# Remove 'CL1_' from the cluster names for plotting
plot_labels = [cluster.split('_')[1] for cluster in cluster1_df.index]

# Plot Bias for Cluster 1
plt.figure(figsize=(10, 6))
bars = plt.bar(range(len(cluster1_df)), cluster1_df['Mean_Bias'], yerr=cluster1_df['Std_Bias'], capsize=5, color='blue', edgecolor='black')
plt.title('Bias for Cluster 1')
plt.ylabel('Bias')
plt.xlabel('Model Type')
plt.xticks(range(len(cluster1_df)), plot_labels, rotation=45, ha='right')

# Show plot
plt.tight_layout()
plt.show()

# Sort the DataFrame based on the cluster order for CL2
cluster2_df = summary_df.filter(like='CL2', axis=0)
cluster2_df = cluster2_df.reindex(index=[f'CL2_{cluster}' for cluster in cluster_order])

# Plot Bias for Cluster 2
plt.figure(figsize=(10, 6))
bars = plt.bar(range(len(cluster2_df)), cluster2_df['Mean_Bias'], yerr=cluster2_df['Std_Bias'], capsize=5, color='green', edgecolor='black')
plt.title('Bias for Cluster 2')
plt.ylabel('Bias')
plt.xlabel('Model Type')
plt.xticks(range(len(cluster2_df)), plot_labels, rotation=45, ha='right')

# Show plot
plt.tight_layout()
plt.show()

# Sort the DataFrame based on the cluster order for CL3
cluster3_df = summary_df.filter(like='CL3', axis=0)
cluster3_df = cluster3_df.reindex(index=[f'CL3_{cluster}' for cluster in cluster_order])

# Plot Bias for Cluster 3
plt.figure(figsize=(10, 6))
bars = plt.bar(range(len(cluster3_df)), cluster3_df['Mean_Bias'], yerr=cluster3_df['Std_Bias'], capsize=5, color='red', edgecolor='black')
plt.title('Bias for Cluster 3')
plt.ylabel('Bias')
plt.xlabel('Model Type')
plt.xticks(range(len(cluster3_df)), plot_labels, rotation=45, ha='right')

# Show plot
plt.tight_layout()
plt.show()

# Plot RMSE for Cluster 1 in blue
plt.figure(figsize=(10, 10))
bars = plt.bar(range(len(cluster1_df)), cluster1_df['Mean_RMSE'], yerr=cluster1_df['Std_RMSE'], capsize=5, color='blue', edgecolor='black')
plt.title('RMSE for Cluster 1', fontsize=22)
plt.ylabel('RMSE [°C]', fontsize=22)
plt.xticks(range(len(cluster1_df)), plot_labels, rotation=45, ha='right', fontsize=20)
plt.yticks(fontsize=20)
plt.ylim(0, 2)  # Set y-axis limits from 0 to 2

# Add mean values on top of each bar
for bar, mean_value in zip(bars, cluster1_df['Mean_RMSE']):
    plt.text(bar.get_x() + bar.get_width() / 2 - 0.2, bar.get_height() + 0.02, f'{mean_value:.3f}', ha='center', color='black', fontsize=22)
# Add a horizontal dashed line at y=0 with a label
plt.axhline(y=1.8670, color='gray', linestyle='--', label='ERA5')
# Add legend
plt.legend(fontsize=18)
plt.tight_layout()
plt.show()

# Plot RMSE for Cluster 2 in green
plt.figure(figsize=(10, 10))
bars = plt.bar(range(len(cluster2_df)), cluster2_df['Mean_RMSE'], yerr=cluster2_df['Std_RMSE'], capsize=5, color='green', edgecolor='black')
plt.title('RMSE for Cluster 2', fontsize=22)
plt.ylabel('RMSE [°C]', fontsize=22)
plt.xticks(range(len(cluster2_df)), plot_labels, rotation=45, ha='right', fontsize=20)
plt.yticks(fontsize=20)
plt.ylim(0, 2)  # Set y-axis limits from 0 to 2

# Add mean values on top of each bar
for bar, mean_value in zip(bars, cluster2_df['Mean_RMSE']):
    plt.text(bar.get_x() + bar.get_width() / 2 - 0.2, bar.get_height() + 0.02, f'{mean_value:.3f}', ha='center', color='black', fontsize=22)
plt.axhline(y=1.7414, color='gray', linestyle='--', label='ERA5')
# Add legend
plt.legend(fontsize=18)
plt.tight_layout()
plt.show()

# Plot RMSE for Cluster 3 in red
plt.figure(figsize=(10, 10))
bars = plt.bar(range(len(cluster3_df)), cluster3_df['Mean_RMSE'], yerr=cluster3_df['Std_RMSE'], capsize=5, color='red', edgecolor='black')
plt.title('RMSE for Cluster 3', fontsize=22)
plt.ylabel('RMSE [°C]', fontsize=22)
plt.xticks(range(len(cluster3_df)), plot_labels, rotation=45, ha='right', fontsize=20)
plt.yticks(fontsize=20)
plt.ylim(0, 2)  # Set y-axis limits from 0 to 2

# Add mean values on top of each bar
for bar, mean_value in zip(bars, cluster3_df['Mean_RMSE']):
    plt.text(bar.get_x() + bar.get_width() / 2 - 0.2, bar.get_height() + 0.02, f'{mean_value:.3f}', ha='center', color='black', fontsize=22)
plt.axhline(y=1.4360, color='gray', linestyle='--', label='ERA5')
# Add legend
plt.legend(fontsize=18)
plt.tight_layout()
plt.show()

# Plot Bias for Cluster 1 in blue
plt.figure(figsize=(10, 10))
bars = plt.bar(range(len(cluster1_df)), cluster1_df['Mean_Bias'], yerr=cluster1_df['Std_Bias'], capsize=5, color='blue', edgecolor='black')
plt.title('Bias for Cluster 1', fontsize=22)
plt.ylabel('Bias [°C]', fontsize=22)
plt.xticks(range(len(cluster1_df)), plot_labels, rotation=45, ha='right', fontsize=20)
plt.yticks(fontsize=20)
plt.ylim(-1, 1.5)  # Set y-axis limits from -0.5 to 0.5
plt.axhline(y=-0, color='black')

# Add mean values on top of each bar
for bar, mean_value in zip(bars, cluster1_df['Mean_Bias']):
    plt.text(bar.get_x() + bar.get_width() / 2 - 0.2, bar.get_height() + 0.02, f'{mean_value:.3f}', ha='center', color='black', fontsize=22)
plt.axhline(y=-0.5196, color='gray', linestyle='--', label='ERA5')
# Add legend
plt.legend(fontsize=18)
plt.tight_layout()
plt.show()

# Plot Bias for Cluster 2 in green
plt.figure(figsize=(10, 10))
bars = plt.bar(range(len(cluster2_df)), cluster2_df['Mean_Bias'], yerr=cluster2_df['Std_Bias'], capsize=5, color='green', edgecolor='black')
plt.title('Bias for Cluster 2', fontsize=22)
plt.ylabel('Bias [°C]', fontsize=22)
plt.xticks(range(len(cluster2_df)), plot_labels, rotation=45, ha='right', fontsize=20)
plt.yticks(fontsize=20)
plt.ylim(-1, 1.5)  # Set y-axis limits from -0.5 to 0.5
plt.axhline(y=-0, color='black')

# Add mean values on top of each bar
for bar, mean_value in zip(bars, cluster2_df['Mean_Bias']):
    plt.text(bar.get_x() + bar.get_width() / 2 - 0.2, bar.get_height() + 0.02, f'{mean_value:.3f}', ha='center', color='black', fontsize=22)
plt.axhline(y= -0.2143, color='gray', linestyle='--', label='ERA5')
# Add legend
plt.legend(fontsize=18)
plt.tight_layout()
plt.show()

# Plot Bias for Cluster 3 in red
plt.figure(figsize=(10, 10))
bars = plt.bar(range(len(cluster3_df)), cluster3_df['Mean_Bias'], yerr=cluster3_df['Std_Bias'], capsize=5, color='red', edgecolor='black')
plt.title('Bias for Cluster 3', fontsize=22)
plt.ylabel('Bias [°C]', fontsize=22)
plt.xticks(range(len(cluster3_df)), plot_labels, rotation=45, ha='right', fontsize=20)
plt.yticks(fontsize=20)
plt.ylim(-1, 1.5)  # Set y-axis limits from -0.5 to 0.5
plt.axhline(y=-0, color='black')

# Add mean values on top of each bar
for bar, mean_value in zip(bars, cluster3_df['Mean_Bias']):
    plt.text(bar.get_x() + bar.get_width() / 2 - 0.2, bar.get_height() + 0.02, f'{mean_value:.3f}', ha='center', color='black', fontsize=22)
plt.axhline(y=-0.1081, color='gray', linestyle='--', label='ERA5')
# Add legend
plt.legend(fontsize=18)
plt.tight_layout()
plt.show()