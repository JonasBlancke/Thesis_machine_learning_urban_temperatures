# -*- coding: utf-8 -*-
"""Temporal_validation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QosuWrtN4WxjqR7JNz1p-UlWRlXW6XYU
"""

import codecs
celcius='\u00B0C'

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import matplotlib.dates as mdates

# Load the CSV files
mean_T2M_pred_Brussels = pd.read_csv('/content/drive/MyDrive/thesis/Temporal_val/mean_T2M_pred_Brussels07.csv', index_col='time', parse_dates=True)
mean_T2M_UrbClim_Brussels = pd.read_csv('/content/drive/MyDrive/thesis/Temporal_val/mean_T2M_UrbClim_Brussels07.csv', index_col='time', parse_dates=True)
mean_T2M_diff_pred_Brussels = pd.read_csv('/content/drive/MyDrive/thesis/Temporal_val/mean_T2M_diff_pred_Brussels07.csv', index_col='time', parse_dates=True)
mean_T2M_diff_UrbClim_Brussels = pd.read_csv('/content/drive/MyDrive/thesis/Temporal_val/mean_mean_T2M_diff_UrbClim_Brussels07.csv', index_col='time', parse_dates=True)
mean_T2M_ERA5_Brussels = pd.read_csv('/content/drive/MyDrive/thesis/Temporal_val/mean_T2M_ERA5_Brussels07.csv', index_col='time', parse_dates=True)

# Filter data within the specified date range
start_date = '2017-07-08 00:00:00'
end_date = '2017-07-15 00:00:00'
mean_T2M_pred_Brussels = mean_T2M_pred_Brussels.loc[start_date:end_date]
mean_T2M_UrbClim_Brussels = mean_T2M_UrbClim_Brussels.loc[start_date:end_date]
mean_T2M_diff_pred_Brussels = mean_T2M_diff_pred_Brussels.loc[start_date:end_date]
mean_T2M_diff_UrbClim_Brussels = mean_T2M_diff_UrbClim_Brussels.loc[start_date:end_date]
mean_T2M_ERA5_Brussels = mean_T2M_ERA5_Brussels.loc[start_date:end_date]
start_date = pd.to_datetime('2017-07-08 00:00:00')
end_date = pd.to_datetime('2017-07-15 00:00:00')
# Concatenate them into a single DataFrame
df_concat_diff = pd.concat([mean_T2M_diff_pred_Brussels, mean_T2M_diff_UrbClim_Brussels], axis=1)
df_concat_diff.columns = ['T2M_diff_pred', 'T2M_diff_UrbClim']
# Concatenate them into a single DataFrame
df_concat = pd.concat([mean_T2M_pred_Brussels, mean_T2M_UrbClim_Brussels, mean_T2M_ERA5_Brussels], axis=1)
df_concat.columns = ['T2M_pred', 'T2M_UrbClim', 'T2M_ERA5']

# Plot
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 10), sharex=True)

# Define nighttime shading
start_night = pd.to_datetime('22:00').time()
end_night = pd.to_datetime('06:00').time()

for ax in [ax1, ax2]:
    for day in pd.date_range(start=start_date, end=end_date, freq='D'):
        ax.axvspan(day + pd.Timedelta(hours=start_night.hour), day + pd.Timedelta(hours=24 + end_night.hour), color='k', alpha=0.3)

# Main plot
ax1.plot(df_concat.index, df_concat['T2M_pred'], label='T2M_RFmodel', color='orange')
ax1.plot(df_concat.index, df_concat['T2M_UrbClim'], label='T2M_UrbClim', color='green')
ax1.plot(df_concat.index, df_concat['T2M_ERA5'], label='T2M_ERA5',color='blue')

ax1.set_ylabel(f'Temperature [째C]', fontsize=17)
ax1.set_title('Temporal pattern of average Brussels 2m temperature \n (08-07-2017 - 15-07-2017) ', fontsize=17)
ax1.legend(loc='upper right', fontsize=14)
ax1.grid(True)
ax1.set_xlim(start_date, end_date)
ax1.tick_params(axis='both', which='major', labelsize=13)
ax1.xaxis.set_major_formatter(mdates.DateFormatter('%d-%m-%Y'))  # Format x-axis labels

# Subplot
ax2.plot(df_concat_diff.index, df_concat_diff['T2M_diff_pred'], label='T2M_diff_RFmodel', color='orange')
ax2.plot(df_concat_diff.index, df_concat_diff['T2M_diff_UrbClim'], label='T2M_diff_UrbClim', color='green')
ax2.set_ylabel(f'ERA5 residual [째C]', fontsize=17)
ax2.legend(loc='upper right', fontsize=14)
ax2.grid(True)
ax2.tick_params(axis='both', which='major', labelsize=13)
ax2.axhline(y=0, color='black', linestyle='--')  # Add zero line
ax2.xaxis.set_major_formatter(mdates.DateFormatter('%d-%m-%Y'))  # Format x-axis labels
ax2.set_ylim(-1.5, 4)  # Set y-axis limits for the second subplot





plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# Load the CSV files
mean_T2M_pred_Brussels = pd.read_csv('/content/drive/MyDrive/thesis/Temporal_val/mean_T2M_pred_Brussels06.csv', index_col='time', parse_dates=True)
mean_T2M_UrbClim_Brussels = pd.read_csv('/content/drive/MyDrive/thesis/Temporal_val/mean_T2M_UrbClim_Brussels06.csv', index_col='time', parse_dates=True)
mean_T2M_diff_pred_Brussels = pd.read_csv('/content/drive/MyDrive/thesis/Temporal_val/mean_T2M_diff_pred_Brussels06.csv', index_col='time', parse_dates=True)
mean_T2M_diff_UrbClim_Brussels = pd.read_csv('/content/drive/MyDrive/thesis/Temporal_val/mean_mean_T2M_diff_UrbClim_Brussels06.csv', index_col='time', parse_dates=True)
mean_T2M_ERA5_Brussels = pd.read_csv('/content/drive/MyDrive/thesis/Temporal_val/mean_T2M_ERA5_Brussels06.csv', index_col='time', parse_dates=True)

# Filter data within the specified date range
start_date = '2017-06-17 00:00:00'
end_date = '2017-06-24 00:00:00'
mean_T2M_pred_Brussels = mean_T2M_pred_Brussels.loc[start_date:end_date]
mean_T2M_UrbClim_Brussels = mean_T2M_UrbClim_Brussels.loc[start_date:end_date]
mean_T2M_diff_pred_Brussels = mean_T2M_diff_pred_Brussels.loc[start_date:end_date]
mean_T2M_diff_UrbClim_Brussels = mean_T2M_diff_UrbClim_Brussels.loc[start_date:end_date]
mean_T2M_ERA5_Brussels = mean_T2M_ERA5_Brussels.loc[start_date:end_date]
start_date = pd.to_datetime('2017-06-17 00:00:00')
end_date = pd.to_datetime('2017-06-24 00:00:00')
# Concatenate them into a single DataFrame
df_concat_diff = pd.concat([mean_T2M_diff_pred_Brussels, mean_T2M_diff_UrbClim_Brussels], axis=1)
df_concat_diff.columns = ['T2M_diff_pred', 'T2M_diff_UrbClim']
# Concatenate them into a single DataFrame
df_concat = pd.concat([mean_T2M_pred_Brussels, mean_T2M_UrbClim_Brussels, mean_T2M_ERA5_Brussels], axis=1)
df_concat.columns = ['T2M_pred', 'T2M_UrbClim', 'T2M_ERA5']

# Plot
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 10), sharex=True)

# Define nighttime shading
start_night = pd.to_datetime('22:00').time()
end_night = pd.to_datetime('06:00').time()

for ax in [ax1, ax2]:
    for day in pd.date_range(start=start_date, end=end_date, freq='D'):
        ax.axvspan(day + pd.Timedelta(hours=start_night.hour), day + pd.Timedelta(hours=24 + end_night.hour), color='k', alpha=0.3)

# Main plot
ax1.plot(df_concat.index, df_concat['T2M_pred'], label='T2M_RFmodel', color='orange')
ax1.plot(df_concat.index, df_concat['T2M_UrbClim'], label='T2M_UrbClim', color='green')
ax1.plot(df_concat.index, df_concat['T2M_ERA5'], label='T2M_ERA5',color='blue')

ax1.set_ylabel(f'Temperature [째C]', fontsize=17)
ax1.set_title('Temporal pattern of average Brussels 2m temperature \n (2017-06-17 - 2017-06-24) ', fontsize=17)
ax1.legend(loc='upper right', fontsize=14)
ax1.grid(True)
ax1.set_xlim(start_date, end_date)
ax1.tick_params(axis='both', which='major', labelsize=13)

# Subplot
ax2.plot(df_concat_diff.index, df_concat_diff['T2M_diff_pred'], label='T2M_diff_RFmodel', color='orange')
ax2.plot(df_concat_diff.index, df_concat_diff['T2M_diff_UrbClim'], label='T2M_diff_UrbClim', color='green')
ax2.set_ylabel(f'ERA5 residual [째C]', fontsize=17)
ax2.legend(loc='upper right', fontsize=14)
ax2.grid(True)
ax2.tick_params(axis='both', which='major', labelsize=13)
ax2.axhline(y=0, color='black', linestyle='--')  # Add zero line
ax2.set_ylim(-1.5, 4)  # Set y-axis limits for the second subplot





plt.tight_layout()
plt.show()