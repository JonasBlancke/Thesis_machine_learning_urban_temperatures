# -*- coding: utf-8 -*-
"""analyseweather.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oi_3anFZxxYeKvwaw2sLMKRQ8QCbInn2
"""



from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np

df=pd.read_csv('/content/drive/MyDrive/thesis/weather/evaluation_results_error.csv')

def transform_df(df):
    # Extract the relevant parts from the 'Name' column
    def parse_name(name):
        parts = name.split('_')
        situation = int(parts[0][9:])
        if parts[1] == 'model':
            type_ = 'RFmodel'
        else:
            type_ = 'ERA5'
        scoring = parts[2].upper()
        std = None
        if len(parts) > 3 and parts[3] == 'std':
            scoring += '_std'
        return situation, type_, scoring

    df[['Situation', 'Type', 'Scoring']] = df['Unnamed: 0'].apply(lambda x: pd.Series(parse_name(x)))

    # Handle the standard deviation values
    std_map = df.set_index(['Situation', 'Type', 'Scoring'])['0'].to_dict()
    df['Std'] = df.apply(lambda row: std_map.get((row['Situation'], row['Type'], row['Scoring'] + '_std'), None) if '_std' not in row['Scoring'] else None, axis=1)

    # Correct the 'Scoring' values by removing '_std'
    df['Scoring'] = df['Scoring'].str.replace('_std', '')

    # Drop rows where 'Scoring' contains 'std'
    df = df[~df['Scoring'].str.contains('std')]

    # Rename columns
    df.rename(columns={'Unnamed: 0': 'Name', '0': 'Value'}, inplace=True)

    # Rearrange columns
    df = df[['Name', 'Value', 'Situation', 'Type', 'Scoring', 'Std']]

    return df

transformed_df = transform_df(df)
test = transformed_df.dropna(subset=['Std'])
test['Scoring'] = test['Scoring'].replace('BIAS', 'Bias')

# Data extracted manually from the image
situation_label_data = {
    'Situation': [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5,
                  6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10,
                  11, 11, 11, 11, 12, 12, 12, 12],
    'Label': ['Rainy-day', 'Rainy-day', 'Rainy-day', 'Rainy-day', 'Dry-day', 'Dry-day', 'Dry-day', 'Dry-day',
              'Rainy-night', 'Rainy-night', 'Rainy-night', 'Rainy-night', 'Dry-night', 'Dry-night', 'Dry-night', 'Dry-night',
              'Cloudy-day', 'Cloudy-day', 'Cloudy-day', 'Cloudy-day', 'Clear-day', 'Clear-day', 'Clear-day', 'Clear-day',
              'Cloudy-night', 'Cloudy-night', 'Cloudy-night', 'Cloudy-night', 'Clear-night', 'Clear-night', 'Clear-night', 'Clear-night',
              'Windy-day', 'Windy-day', 'Windy-day', 'Windy-day', 'Calm-day', 'Calm-day', 'Calm-day', 'Calm-day',
              'Windy-night', 'Windy-night', 'Windy-night', 'Windy-night', 'Calm-night', 'Calm-night', 'Calm-night', 'Calm-night']
}

situation_label_df = pd.DataFrame(situation_label_data)

df = test.merge(situation_label_df, on='Situation')

import matplotlib as plt

import matplotlib.pyplot as plt

# Assume `df` is your DataFrame with columns: Name, Value, Situation, Label, Type, Scoring, Std

# Get unique situations
situations = df['Label'].unique()

# Define colors for ERA5 and RFmodel
colors = {'ERA5': 'blue', 'RFmodel': 'orange'}

# Plot RMSE and Bias values
for scoring in ['RMSE', 'Bias']:
    plt.figure(figsize=(14, 6))
    legend_labels = []  # Track legend labels to avoid duplicates

    for i, situation in enumerate(situations):
        # Filter data for the current situation and scoring
        df_filtered = df[(df['Label'] == situation) & (df['Scoring'] == scoring)]

        # Plot bars for ERA5 and RFmodel
        if not df_filtered.empty:
            era5_row = df_filtered[df_filtered['Type'] == 'ERA5']
            rfmodel_row = df_filtered[df_filtered['Type'] == 'RFmodel']

            if not era5_row.empty:
                era5_value = era5_row['Value'].iloc[0]
                era5_std = era5_row['Std'].iloc[0]
                plt.bar(i - 0.2, era5_value, color=colors['ERA5'], width=0.4, align='center')
                plt.errorbar(i - 0.2, era5_value, yerr=era5_std, fmt='none', ecolor='black', capsize=5)

            if not rfmodel_row.empty:
                rfmodel_value = rfmodel_row['Value'].iloc[0]
                rfmodel_std = rfmodel_row['Std'].iloc[0]
                plt.bar(i + 0.2, rfmodel_value, color=colors['RFmodel'], width=0.4, align='center')
                plt.errorbar(i + 0.2, rfmodel_value, yerr=rfmodel_std, fmt='none', ecolor='black', capsize=5)

            # Add legend labels if not already added
            for model, color in colors.items():
                if model not in legend_labels:
                    plt.bar(10, 0, color=color, label=model)  # Dummy bar for legend
                    legend_labels.append(model)

    plt.ylabel(f'{scoring} [Â°C]', fontsize=16)
    plt.title(f'{scoring} in function of the weather condition', fontsize=19)
    plt.xticks(range(len(situations)), situations, rotation=45, ha='right', fontsize=14)
    plt.yticks(fontsize=14)
    plt.legend(fontsize=14, loc='upper center')
    plt.tight_layout()
    plt.savefig(f'{scoring}_comparison_weather.png')
    plt.show()